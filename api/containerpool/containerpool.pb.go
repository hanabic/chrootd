// Code generated by protoc-gen-go. DO NOT EDIT.
// source: containerpool.proto

package ContainerPool

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Query struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsCreate             bool     `protobuf:"varint,2,opt,name=isCreate,proto3" json:"isCreate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d6a60be737138, []int{0}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Query) GetIsCreate() bool {
	if m != nil {
		return m.IsCreate
	}
	return false
}

type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d6a60be737138, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Reply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*SetRequest_Delete
	Body                 isSetRequest_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}
func (*SetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d6a60be737138, []int{2}
}

func (m *SetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRequest.Unmarshal(m, b)
}
func (m *SetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRequest.Marshal(b, m, deterministic)
}
func (m *SetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRequest.Merge(m, src)
}
func (m *SetRequest) XXX_Size() int {
	return xxx_messageInfo_SetRequest.Size(m)
}
func (m *SetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRequest proto.InternalMessageInfo

func (m *SetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isSetRequest_Body interface {
	isSetRequest_Body()
}

type SetRequest_Delete struct {
	Delete *DeleteContainer `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

func (*SetRequest_Delete) isSetRequest_Body() {}

func (m *SetRequest) GetBody() isSetRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *SetRequest) GetDelete() *DeleteContainer {
	if x, ok := m.GetBody().(*SetRequest_Delete); ok {
		return x.Delete
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SetRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SetRequest_Delete)(nil),
	}
}

type DeleteContainer struct {
	Op                   bool     `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteContainer) Reset()         { *m = DeleteContainer{} }
func (m *DeleteContainer) String() string { return proto.CompactTextString(m) }
func (*DeleteContainer) ProtoMessage()    {}
func (*DeleteContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_282d6a60be737138, []int{3}
}

func (m *DeleteContainer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteContainer.Unmarshal(m, b)
}
func (m *DeleteContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteContainer.Marshal(b, m, deterministic)
}
func (m *DeleteContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteContainer.Merge(m, src)
}
func (m *DeleteContainer) XXX_Size() int {
	return xxx_messageInfo_DeleteContainer.Size(m)
}
func (m *DeleteContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteContainer.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteContainer proto.InternalMessageInfo

func (m *DeleteContainer) GetOp() bool {
	if m != nil {
		return m.Op
	}
	return false
}

func init() {
	proto.RegisterType((*Query)(nil), "ContainerPool.Query")
	proto.RegisterType((*Reply)(nil), "ContainerPool.Reply")
	proto.RegisterType((*SetRequest)(nil), "ContainerPool.SetRequest")
	proto.RegisterType((*DeleteContainer)(nil), "ContainerPool.DeleteContainer")
}

func init() { proto.RegisterFile("containerpool.proto", fileDescriptor_282d6a60be737138) }

var fileDescriptor_282d6a60be737138 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x71, 0xd4, 0x84, 0x70, 0x50, 0x10, 0x86, 0x21, 0x74, 0x40, 0x25, 0x53, 0xa7, 0x0c,
	0x45, 0x08, 0x24, 0x06, 0xa4, 0x14, 0x21, 0xc6, 0xe2, 0xee, 0x48, 0x69, 0x7d, 0x42, 0x96, 0xd2,
	0x9c, 0x49, 0xdc, 0x21, 0x0f, 0xc1, 0x3b, 0xa3, 0xba, 0xf9, 0xa3, 0x58, 0xdd, 0xee, 0xce, 0xdf,
	0xef, 0xbe, 0xbb, 0x33, 0xdc, 0x6c, 0xa8, 0x30, 0x99, 0x2a, 0xb0, 0xd4, 0x44, 0x79, 0xa2, 0x4b,
	0x32, 0xc4, 0xc7, 0x8b, 0xb6, 0xb8, 0x24, 0xca, 0xe3, 0x67, 0xf0, 0xbf, 0x76, 0x58, 0xd6, 0x9c,
	0xc3, 0xa8, 0xc8, 0xb6, 0x18, 0xb1, 0x29, 0x9b, 0x9d, 0x09, 0x1b, 0xf3, 0x09, 0x84, 0xaa, 0x5a,
	0x94, 0x98, 0x19, 0x8c, 0xbc, 0x29, 0x9b, 0x85, 0xa2, 0xcb, 0xe3, 0x27, 0xf0, 0x05, 0xea, 0xbc,
	0xe6, 0x11, 0x9c, 0x6e, 0xb1, 0xaa, 0xb2, 0x9f, 0x96, 0x6d, 0xd3, 0x7d, 0xcb, 0x0d, 0xc9, 0x03,
	0xea, 0x0b, 0x1b, 0xc7, 0xdf, 0x00, 0x2b, 0x34, 0x02, 0x7f, 0x77, 0x58, 0x19, 0x7e, 0x09, 0x9e,
	0x92, 0x0d, 0xe6, 0x29, 0xc9, 0x5f, 0x20, 0x90, 0x98, 0x63, 0x63, 0x77, 0x3e, 0xbf, 0x4f, 0x06,
	0xd3, 0x26, 0xef, 0xf6, 0xb1, 0xab, 0x7d, 0x9e, 0x88, 0x46, 0x9f, 0x06, 0x30, 0x5a, 0x93, 0xac,
	0xe3, 0x07, 0xb8, 0x72, 0x44, 0x7b, 0x13, 0xd2, 0xd6, 0x24, 0x14, 0x1e, 0xe9, 0xf9, 0x1f, 0x83,
	0xe1, 0x11, 0xf8, 0x2b, 0x8c, 0x3f, 0x54, 0x21, 0x7b, 0xe4, 0xd6, 0xf1, 0xb5, 0x27, 0x9a, 0xb8,
	0xd5, 0xc3, 0xfe, 0x6f, 0x70, 0xb1, 0x42, 0xd3, 0xb3, 0x77, 0x8e, 0xaa, 0x5f, 0xf7, 0x78, 0x83,
	0xf4, 0x3a, 0x1d, 0x8e, 0xb3, 0x64, 0xeb, 0xc0, 0xfe, 0xd5, 0xe3, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x43, 0x88, 0x83, 0x41, 0xc2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContainerPoolClient is the client API for ContainerPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContainerPoolClient interface {
	FindContainer(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error)
	SetContainer(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Reply, error)
}

type containerPoolClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerPoolClient(cc grpc.ClientConnInterface) ContainerPoolClient {
	return &containerPoolClient{cc}
}

func (c *containerPoolClient) FindContainer(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/ContainerPool.ContainerPool/FindContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerPoolClient) SetContainer(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/ContainerPool.ContainerPool/SetContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerPoolServer is the server API for ContainerPool service.
type ContainerPoolServer interface {
	FindContainer(context.Context, *Query) (*Reply, error)
	SetContainer(context.Context, *SetRequest) (*Reply, error)
}

// UnimplementedContainerPoolServer can be embedded to have forward compatible implementations.
type UnimplementedContainerPoolServer struct {
}

func (*UnimplementedContainerPoolServer) FindContainer(ctx context.Context, req *Query) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindContainer not implemented")
}
func (*UnimplementedContainerPoolServer) SetContainer(ctx context.Context, req *SetRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContainer not implemented")
}

func RegisterContainerPoolServer(s *grpc.Server, srv ContainerPoolServer) {
	s.RegisterService(&_ContainerPool_serviceDesc, srv)
}

func _ContainerPool_FindContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerPoolServer).FindContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContainerPool.ContainerPool/FindContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerPoolServer).FindContainer(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerPool_SetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerPoolServer).SetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContainerPool.ContainerPool/SetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerPoolServer).SetContainer(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerPool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ContainerPool.ContainerPool",
	HandlerType: (*ContainerPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindContainer",
			Handler:    _ContainerPool_FindContainer_Handler,
		},
		{
			MethodName: "SetContainer",
			Handler:    _ContainerPool_SetContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "containerpool.proto",
}
