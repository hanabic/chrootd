// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Command struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Reply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Config struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Level                string   `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Config) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Config) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "api.Command")
	proto.RegisterType((*Reply)(nil), "api.Reply")
	proto.RegisterType((*Id)(nil), "api.Id")
	proto.RegisterType((*Config)(nil), "api.Config")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xcb, 0x4a, 0xc4, 0x30,
	0x14, 0x9d, 0xb4, 0xce, 0x94, 0x5e, 0x07, 0x91, 0x4b, 0x17, 0x65, 0x44, 0x18, 0xb2, 0x90, 0x82,
	0x50, 0x44, 0xf1, 0x03, 0xec, 0xac, 0x06, 0x5c, 0x48, 0xfe, 0x20, 0x36, 0xd7, 0x1a, 0x68, 0x9a,
	0xd0, 0x56, 0xd1, 0xbd, 0x1f, 0x2e, 0x89, 0x29, 0xa8, 0xbb, 0xf3, 0xca, 0xc9, 0x49, 0x20, 0x97,
	0x4e, 0xd7, 0x6e, 0xb4, 0xb3, 0xc5, 0x54, 0x3a, 0xcd, 0x2f, 0x20, 0x3b, 0x58, 0x63, 0xe4, 0xa0,
	0xf0, 0x1c, 0xd2, 0xd6, 0xa8, 0x92, 0xed, 0x59, 0x95, 0x0b, 0x0f, 0xf9, 0x3d, 0xac, 0x05, 0xb9,
	0xfe, 0x13, 0x4b, 0xc8, 0x0c, 0x4d, 0x93, 0xec, 0x28, 0xda, 0x0b, 0x45, 0x84, 0x93, 0xd6, 0x2a,
	0x2a, 0x93, 0x3d, 0xab, 0xd6, 0x22, 0x60, 0x5e, 0x40, 0x72, 0x54, 0x78, 0x06, 0x89, 0x5e, 0xda,
	0x12, 0xad, 0x78, 0x03, 0x9b, 0x83, 0x1d, 0x5e, 0x74, 0xf7, 0xdf, 0xf1, 0x1d, 0x4e, 0xce, 0xaf,
	0xa1, 0x23, 0x17, 0x01, 0x63, 0x01, 0xeb, 0x9e, 0xde, 0xa9, 0x2f, 0xd3, 0x20, 0xfe, 0x90, 0xdb,
	0x2f, 0x06, 0xe9, 0x83, 0xd3, 0x58, 0x01, 0x88, 0xb7, 0x61, 0x19, 0xbe, 0xad, 0xfd, 0xa3, 0x22,
	0xdb, 0x41, 0x60, 0x61, 0x37, 0x5f, 0xe1, 0x15, 0xc0, 0xa3, 0x9e, 0xe6, 0x78, 0x73, 0x16, 0xbc,
	0xa3, 0xda, 0x9d, 0xc6, 0x23, 0x5e, 0xe5, 0xab, 0x1b, 0x86, 0xd7, 0xb0, 0x15, 0xd4, 0xda, 0x51,
	0xc5, 0xe4, 0xef, 0xc0, 0xdf, 0xca, 0x8a, 0x35, 0x97, 0x50, 0x68, 0x5b, 0x77, 0xa3, 0x6b, 0x6b,
	0xfa, 0x90, 0xc6, 0xf5, 0x34, 0xf9, 0x44, 0xe3, 0xb7, 0x3d, 0xb1, 0xe7, 0x4d, 0xf8, 0xdf, 0xbb,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xc3, 0x29, 0x2d, 0x6c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error)
	ListConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (Api_ListConfigClient, error)
	RecordConfig(ctx context.Context, opts ...grpc.CallOption) (Api_RecordConfigClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.Api/RunCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListConfig(ctx context.Context, in *Id, opts ...grpc.CallOption) (Api_ListConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[0], "/api.Api/ListConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiListConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_ListConfigClient interface {
	Recv() (*Config, error)
	grpc.ClientStream
}

type apiListConfigClient struct {
	grpc.ClientStream
}

func (x *apiListConfigClient) Recv() (*Config, error) {
	m := new(Config)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) RecordConfig(ctx context.Context, opts ...grpc.CallOption) (Api_RecordConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[1], "/api.Api/RecordConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiRecordConfigClient{stream}
	return x, nil
}

type Api_RecordConfigClient interface {
	Send(*Config) error
	CloseAndRecv() (*Reply, error)
	grpc.ClientStream
}

type apiRecordConfigClient struct {
	grpc.ClientStream
}

func (x *apiRecordConfigClient) Send(m *Config) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiRecordConfigClient) CloseAndRecv() (*Reply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	RunCommand(context.Context, *Command) (*Reply, error)
	ListConfig(*Id, Api_ListConfigServer) error
	RecordConfig(Api_RecordConfigServer) error
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) RunCommand(ctx context.Context, req *Command) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (*UnimplementedApiServer) ListConfig(req *Id, srv Api_ListConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method ListConfig not implemented")
}
func (*UnimplementedApiServer) RecordConfig(srv Api_RecordConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordConfig not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).RunCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).ListConfig(m, &apiListConfigServer{stream})
}

type Api_ListConfigServer interface {
	Send(*Config) error
	grpc.ServerStream
}

type apiListConfigServer struct {
	grpc.ServerStream
}

func (x *apiListConfigServer) Send(m *Config) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_RecordConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).RecordConfig(&apiRecordConfigServer{stream})
}

type Api_RecordConfigServer interface {
	SendAndClose(*Reply) error
	Recv() (*Config, error)
	grpc.ServerStream
}

type apiRecordConfigServer struct {
	grpc.ServerStream
}

func (x *apiRecordConfigServer) SendAndClose(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiRecordConfigServer) Recv() (*Config, error) {
	m := new(Config)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunCommand",
			Handler:    _Api_RunCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConfig",
			Handler:       _Api_ListConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordConfig",
			Handler:       _Api_RecordConfig_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
